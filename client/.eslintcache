[{"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\index.tsx":"1","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\App.tsx":"3","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\store.ts":"4","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\Navbar.tsx":"5","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\layout\\Main.tsx":"6","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\rootReducer.ts":"7","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postActions.ts":"8","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostView.tsx":"9","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostList.tsx":"10","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postReducer.ts":"11","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postTypes.ts":"12","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\posts\\PostList.tsx":"13","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\ModalPop.tsx":"14","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\posts\\PostEdit.tsx":"15","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\posts\\PostView.tsx":"16","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\util\\stringCompare.ts":"17"},{"size":504,"mtime":1610044490750,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":661,"mtime":1610044490741,"results":"21","hashOfConfig":"19"},{"size":419,"mtime":1610105317211,"results":"22","hashOfConfig":"19"},{"size":6096,"mtime":1610105594902,"results":"23","hashOfConfig":"19"},{"size":2602,"mtime":1610105447654,"results":"24","hashOfConfig":"19"},{"size":194,"mtime":1610044490754,"results":"25","hashOfConfig":"19"},{"size":2420,"mtime":1610103997132,"results":"26","hashOfConfig":"19"},{"size":656,"mtime":1610044628683,"results":"27","hashOfConfig":"19"},{"size":2776,"mtime":1610044628682,"results":"28","hashOfConfig":"19"},{"size":1733,"mtime":1610105266888,"results":"29","hashOfConfig":"19"},{"size":464,"mtime":1610103789087,"results":"30","hashOfConfig":"19"},{"size":5435,"mtime":1610111261735,"results":"31","hashOfConfig":"19"},{"size":9771,"mtime":1610045605595,"results":"32","hashOfConfig":"19"},{"size":3259,"mtime":1610045605597,"results":"33","hashOfConfig":"19"},{"size":618,"mtime":1610045605598,"results":"34","hashOfConfig":"19"},{"size":226,"mtime":1610109564385,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"p5r2f3",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\index.tsx",[],["76","77"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\App.tsx",["78"],"import { makeStyles, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport Navbar from \"./components/Navbar\";\nimport Main from \"./layout/Main\";\nimport store from \"./redux/store\";\n\nconst useStyles = makeStyles({\n    app: {\n        fontFamily: \"Roboto\",\n    },\n});\n\nfunction App() {\n    const classes = useStyles();\n\n    return (\n        <Provider store={store}>\n            <div className={classes.app}>\n                <Navbar options={[\"my\", \"nodeJS\", \"geometry\"]}></Navbar>\n                <Main></Main>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\store.ts",["79"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\Navbar.tsx",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\layout\\Main.tsx",["80","81"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\rootReducer.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postActions.ts",["82"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostView.tsx",[],["83","84"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostList.tsx",["85","86","87","88","89","90"],"import classes from \"*.module.css\";\r\nimport {\r\n    Accordion,\r\n    AccordionDetails,\r\n    AccordionSummary,\r\n    Box,\r\n    Collapse,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Paper,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { ExpandLess } from \"@material-ui/icons\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Post from \"../redux/Post\";\r\nimport { changeCurrentPost } from \"../redux/posts/postActions\";\r\n\r\ninterface PostListProps {\r\n    items: Post[];\r\n}\r\n\r\nconst PostList: React.FC<PostListProps> = ({ items = [] }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [collapsed, setCollapsed] = React.useState<{\r\n        [index: string]: boolean;\r\n    }>({});\r\n    const handleCollapse = (index: string) => {\r\n        setCollapsed((collapsed) => ({\r\n            ...collapsed,\r\n            [index]: !collapsed[index],\r\n        }));\r\n    };\r\n\r\n    const handleListClick = (categoryId: string, postId: string) => {\r\n        dispatch(changeCurrentPost(categoryId, postId));\r\n    };\r\n\r\n    return (\r\n        <Paper>\r\n            <List component=\"nav\">\r\n                {items.map((item) => (\r\n                    <>\r\n                        <ListItem\r\n                            button\r\n                            onClick={() => handleCollapse(item._id)}\r\n                        >\r\n                            <ListItemText primary={item.category} />\r\n                            {collapsed[item._id] ? (\r\n                                <ExpandLess />\r\n                            ) : (\r\n                                <ExpandMore />\r\n                            )}\r\n                        </ListItem>\r\n\r\n                        <Collapse\r\n                            in={collapsed[item._id]}\r\n                            timeout=\"auto\"\r\n                            unmountOnExit\r\n                        >\r\n                            <List disablePadding>\r\n                                {item.articles.map((post) => (\r\n                                    <ListItem\r\n                                        onClick={() =>\r\n                                            handleListClick(item._id, post._id)\r\n                                        }\r\n                                        key={post._id}\r\n                                        button\r\n                                    >\r\n                                        <ListItemText primary={post.name} />\r\n                                    </ListItem>\r\n                                ))}\r\n                            </List>\r\n                        </Collapse>\r\n                    </>\r\n                ))}\r\n            </List>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default PostList;\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postReducer.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postTypes.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\posts\\PostList.tsx",["91","92","93","94","95","96","97"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\ModalPop.tsx",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\posts\\PostEdit.tsx",["98"],"import { Box, Button, makeStyles, TextField } from '@material-ui/core';\r\nimport React, { ChangeEvent, useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport 'highlight.js/styles/darcula.css';\r\nimport '../styles/editor.css';\r\nimport { Autocomplete } from '@material-ui/lab';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\ninterface PostViewProps {\r\n  onSave: (category: string, name: string, content: string) => void;\r\n}\r\n\r\nconst PostView: React.FC<PostViewProps> = ({ onSave }) => {\r\n  const [value, setValue] = useState(''); // quill text body\r\n  const [name, setName] = useState('');\r\n  const [category, setCategory] = useState({ title: '' });\r\n  const [categories, setCategories] = useState([\r\n    { title: 'web' },\r\n    { title: 'math' },\r\n    { title: 'english' },\r\n  ]);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    console.log(value);\r\n  }, [value]);\r\n\r\n  return (\r\n    <>\r\n      <ReactQuill\r\n        modules={{\r\n          syntax: true,\r\n          toolbar: [\r\n            ['bold', 'italic', 'underline', 'strike'], // toggled buttons\r\n            ['blockquote'],\r\n            ['image', 'code-block'],\r\n\r\n            [{ header: 1 }, { header: 2 }], // custom button values\r\n            [{ list: 'ordered' }, { list: 'bullet' }],\r\n            [{ script: 'sub' }, { script: 'super' }], // superscript/subscript\r\n            [{ indent: '-1' }, { indent: '+1' }], // outdent/indent\r\n            [{ direction: 'rtl' }], // text direction\r\n\r\n            [{ size: ['small', false, 'large', 'huge'] }], // custom dropdown\r\n            [{ header: [1, 2, 3, 4, 5, 6, false] }],\r\n\r\n            [{ color: [] }, { background: [] }], // dropdown with defaults from theme\r\n            [{ font: ['roboto', 'Times New Roman'] }],\r\n            [{ align: [] }],\r\n\r\n            ['clean'], // remove formatting button\r\n          ],\r\n        }}\r\n        theme=\"snow\"\r\n        value={value}\r\n        onChange={setValue}\r\n      />\r\n      <Box my={2}>\r\n        <TextField\r\n          style={{ width: 300 }}\r\n          onChange={e => setName(e.target.value)}\r\n          label=\"name\"\r\n          variant=\"filled\"\r\n        />\r\n      </Box>\r\n      <Box my={2}>\r\n        <Autocomplete\r\n          onChange={(\r\n            event: ChangeEvent<{}>,\r\n            categorySelected: { title: string } | null\r\n          ) => {\r\n            setCategory(categorySelected!);\r\n          }}\r\n          options={categories}\r\n          getOptionLabel={(option: { title: string }) => option.title}\r\n          style={{ width: 300 }}\r\n          renderInput={(params: any) => (\r\n            <TextField {...params} label=\"Category\" variant=\"filled\" />\r\n          )}\r\n        />\r\n      </Box>\r\n\r\n      <Box display=\"flex\" my={2}>\r\n        <Button\r\n          onClick={() => {\r\n            onSave(category.title, name, value);\r\n          }}\r\n          variant=\"contained\"\r\n          className={classes.button}\r\n          color=\"primary\"\r\n        >\r\n          save\r\n        </Button>\r\n        <Button variant=\"contained\" color=\"primary\">\r\n          cancel\r\n        </Button>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostView;\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\posts\\PostView.tsx",["99"],"import { Breadcrumbs, Link, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport parse from 'html-react-parser';\r\nimport { Article } from '../../redux/Post';\r\n\r\ninterface PostViewProps {\r\n  category: string;\r\n  article: Article;\r\n}\r\n\r\nconst PostView: React.FC<PostViewProps> = ({ category, article }) => {\r\n  const htmlInput = article.body;\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumbs aria-label=\"breadcrumb\">\r\n        <Link>{category}</Link>\r\n        <Link color=\"inherit\">{article.name}</Link>\r\n      </Breadcrumbs>\r\n      {parse(htmlInput)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostView;\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\util\\stringCompare.ts",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":1,"column":22,"nodeType":"106","messageId":"107","endLine":1,"endColumn":32},{"ruleId":"104","severity":1,"message":"108","line":1,"column":10,"nodeType":"106","messageId":"107","endLine":1,"endColumn":22},{"ruleId":"104","severity":1,"message":"109","line":6,"column":8,"nodeType":"106","messageId":"107","endLine":6,"endColumn":12},{"ruleId":"110","severity":1,"message":"111","line":33,"column":8,"nodeType":"112","endLine":33,"endColumn":10,"suggestions":"113"},{"ruleId":"104","severity":1,"message":"114","line":2,"column":10,"nodeType":"106","messageId":"107","endLine":2,"endColumn":14},{"ruleId":"100","replacedBy":"115"},{"ruleId":"102","replacedBy":"116"},{"ruleId":"104","severity":1,"message":"117","line":1,"column":8,"nodeType":"106","messageId":"107","endLine":1,"endColumn":15},{"ruleId":"104","severity":1,"message":"118","line":3,"column":5,"nodeType":"106","messageId":"107","endLine":3,"endColumn":14},{"ruleId":"104","severity":1,"message":"119","line":4,"column":5,"nodeType":"106","messageId":"107","endLine":4,"endColumn":21},{"ruleId":"104","severity":1,"message":"120","line":5,"column":5,"nodeType":"106","messageId":"107","endLine":5,"endColumn":21},{"ruleId":"104","severity":1,"message":"121","line":6,"column":5,"nodeType":"106","messageId":"107","endLine":6,"endColumn":8},{"ruleId":"104","severity":1,"message":"105","line":12,"column":5,"nodeType":"106","messageId":"107","endLine":12,"endColumn":15},{"ruleId":"104","severity":1,"message":"118","line":3,"column":5,"nodeType":"106","messageId":"107","endLine":3,"endColumn":14},{"ruleId":"104","severity":1,"message":"119","line":4,"column":5,"nodeType":"106","messageId":"107","endLine":4,"endColumn":21},{"ruleId":"104","severity":1,"message":"120","line":5,"column":5,"nodeType":"106","messageId":"107","endLine":5,"endColumn":21},{"ruleId":"104","severity":1,"message":"122","line":11,"column":5,"nodeType":"106","messageId":"107","endLine":11,"endColumn":17},{"ruleId":"104","severity":1,"message":"105","line":14,"column":5,"nodeType":"106","messageId":"107","endLine":14,"endColumn":15},{"ruleId":"123","severity":1,"message":"124","line":51,"column":34,"nodeType":"125","messageId":"126","endLine":51,"endColumn":36},{"ruleId":"123","severity":1,"message":"124","line":97,"column":67,"nodeType":"125","messageId":"126","endLine":97,"endColumn":69},{"ruleId":"104","severity":1,"message":"127","line":24,"column":22,"nodeType":"106","messageId":"107","endLine":24,"endColumn":35},{"ruleId":"104","severity":1,"message":"105","line":1,"column":29,"nodeType":"106","messageId":"107","endLine":1,"endColumn":39},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'initialState' is defined but never used.","'Post' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["130"],"'uuid' is defined but never used.",["128"],["129"],"'classes' is defined but never used.","'Accordion' is defined but never used.","'AccordionDetails' is defined but never used.","'AccordionSummary' is defined but never used.","'Box' is defined but never used.","'ListItemIcon' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'setCategories' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},"Update the dependencies array to be: [dispatch]",{"range":"133","text":"134"},[1185,1187],"[dispatch]"]