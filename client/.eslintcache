[{"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\index.tsx":"1","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\App.tsx":"3","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\Navbar.tsx":"4","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\layout\\Main.tsx":"5","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostList.tsx":"6","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostView.tsx":"7","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostEdit.tsx":"8","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postActions.ts":"9","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postTypes.ts":"10","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\store.ts":"11","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\rootReducer.ts":"12","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postReducer.ts":"13","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\Post.ts":"14"},{"size":488,"mtime":1608818239876,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":634,"mtime":1609005930125,"results":"18","hashOfConfig":"16"},{"size":2633,"mtime":1608582638049,"results":"19","hashOfConfig":"16"},{"size":1946,"mtime":1609047110584,"results":"20","hashOfConfig":"16"},{"size":2762,"mtime":1609014256607,"results":"21","hashOfConfig":"16"},{"size":696,"mtime":1609047750782,"results":"22","hashOfConfig":"16"},{"size":3122,"mtime":1608899951293,"results":"23","hashOfConfig":"16"},{"size":3141,"mtime":1609047853090,"results":"24","hashOfConfig":"16"},{"size":228,"mtime":1609009126485,"results":"25","hashOfConfig":"16"},{"size":368,"mtime":1609005033296,"results":"26","hashOfConfig":"16"},{"size":194,"mtime":1609005025641,"results":"27","hashOfConfig":"16"},{"size":1088,"mtime":1609047004557,"results":"28","hashOfConfig":"16"},{"size":210,"mtime":1609013599812,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"p5r2f3",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\index.tsx",[],["64","65"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\App.tsx",["66"],"import { makeStyles, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport Navbar from \"./components/Navbar\";\nimport Main from \"./layout/Main\";\nimport store from \"./redux/store\";\n\nconst useStyles = makeStyles({\n    app: {\n        fontFamily: \"Roboto\",\n    },\n});\n\nfunction App() {\n    const classes = useStyles();\n\n    return (\n        <Provider store={store}>\n            <div className={classes.app}>\n                <Navbar options={[\"my\", \"nodeJS\", \"geometry\"]}></Navbar>\n                <Main></Main>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\Navbar.tsx",["67","68"],"import {\r\n    AppBar,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    Grid,\r\n    Input,\r\n    InputBase,\r\n    ListItemText,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Toolbar,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst Navbar: React.FC<{ options: string[] }> = ({ options }) => {\r\n    const [categories, setCategories] = React.useState<string[]>([]);\r\n\r\n    const handleSelect = (e: React.ChangeEvent<{ value: unknown }>) => {\r\n        setCategories(e.target.value as string[]);\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"xl\">\r\n            <AppBar color=\"inherit\" position=\"static\">\r\n                <Toolbar>\r\n                    <Grid spacing={3} container>\r\n                        <Grid item xs={1}>\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"inherit\"\r\n                            >\r\n                                add\r\n                            </Button>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={7}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"categories\"\r\n                                multiple\r\n                                onChange={handleSelect}\r\n                                value={categories}\r\n                                input={<Input />}\r\n                                renderValue={(selected: unknown) =>\r\n                                    (selected as string[]).join(\", \")\r\n                                }\r\n                            >\r\n                                {options.map((value, index) => (\r\n                                    <MenuItem\r\n                                        key={Date.now() + index}\r\n                                        value={value}\r\n                                    >\r\n                                        <Checkbox\r\n                                            checked={categories.includes(value)}\r\n                                        />\r\n                                        <ListItemText primary={value} />\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={4}>\r\n                            <Input fullWidth placeholder=\"Searchâ€¦\"></Input>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\layout\\Main.tsx",["69","70"],"import { Box, Container, Grid, Typography } from \"@material-ui/core\";\r\nimport React, { useEffect } from \"react\";\r\nimport PostEdit from \"../components/PostEdit\";\r\nimport PostList from \"../components/PostList\";\r\nimport PostView from \"../components/PostView\";\r\nimport Post from \"../redux/Post\";\r\nimport { fetchPosts } from \"../redux/posts/postActions\";\r\nimport { PostState } from \"../redux/posts/postReducer\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst Main = () => {\r\n    const dispatch = useDispatch();\r\n    const postData = useSelector(\r\n        (state: { postsReducer: PostState }) => state.postsReducer.posts\r\n    );\r\n    const currentPost = useSelector(\r\n        (state: { postsReducer: PostState }) => state.postsReducer.currentPost\r\n    );\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchPosts());\r\n    }, []);\r\n\r\n    console.log(postData);\r\n\r\n    return (\r\n        <Container maxWidth=\"xl\">\r\n            <Grid spacing={2} container>\r\n                <Grid item xs={4}>\r\n                    <Box my={3}>\r\n                        <PostList items={postData}></PostList>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                    <Box my={3}>\r\n                        {currentPost ? (\r\n                            <PostView\r\n                                category={currentPost.category}\r\n                                article={currentPost}\r\n                            ></PostView>\r\n                        ) : (\r\n                            <>\r\n                                <Typography paragraph variant=\"h4\">\r\n                                    Create a post\r\n                                </Typography>\r\n                                <PostEdit></PostEdit>{\" \"}\r\n                            </>\r\n                        )}\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostList.tsx",["71","72","73","74","75","76"],"import classes from \"*.module.css\";\r\nimport {\r\n    Accordion,\r\n    AccordionDetails,\r\n    AccordionSummary,\r\n    Box,\r\n    Collapse,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Paper,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { ExpandLess } from \"@material-ui/icons\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Post from \"../redux/Post\";\r\nimport { changeCurrentPost } from \"../redux/posts/postActions\";\r\n\r\ninterface PostListProps {\r\n    items: Post[];\r\n}\r\n\r\nconst PostList: React.FC<PostListProps> = ({ items }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [collapsed, setCollapsed] = React.useState<{\r\n        [index: string]: boolean;\r\n    }>({});\r\n    const handleCollapse = (index: string) => {\r\n        setCollapsed((collapsed) => ({\r\n            ...collapsed,\r\n            [index]: !collapsed[index],\r\n        }));\r\n    };\r\n\r\n    const handleListClick = (categoryId: string, postId: string) => {\r\n        dispatch(changeCurrentPost(categoryId, postId));\r\n    };\r\n\r\n    return (\r\n        <Paper>\r\n            <List component=\"nav\">\r\n                {items.map((item) => (\r\n                    <>\r\n                        <ListItem\r\n                            button\r\n                            onClick={() => handleCollapse(item.id)}\r\n                        >\r\n                            <ListItemText primary={item.category} />\r\n                            {collapsed[item.id] ? (\r\n                                <ExpandLess />\r\n                            ) : (\r\n                                <ExpandMore />\r\n                            )}\r\n                        </ListItem>\r\n\r\n                        <Collapse\r\n                            in={collapsed[item.id]}\r\n                            timeout=\"auto\"\r\n                            unmountOnExit\r\n                        >\r\n                            <List disablePadding>\r\n                                {item.posts.map((post) => (\r\n                                    <ListItem\r\n                                        onClick={() =>\r\n                                            handleListClick(item.id, post.id)\r\n                                        }\r\n                                        key={post.id}\r\n                                        button\r\n                                    >\r\n                                        <ListItemText primary={post.name} />\r\n                                    </ListItem>\r\n                                ))}\r\n                            </List>\r\n                        </Collapse>\r\n                    </>\r\n                ))}\r\n            </List>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default PostList;\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostView.tsx",["77"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostEdit.tsx",["78","79","80"],"import { Box, Button, makeStyles, Paper, TextField } from \"@material-ui/core\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport ReactQuill, { Quill } from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport \"highlight.js/styles/darcula.css\";\r\nimport \"./styles/editor.css\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nconst PostView = () => {\r\n    const [value, setValue] = useState(\"\");\r\n    const [categories, setCategories] = useState([\r\n        { title: \"web\" },\r\n        { title: \"math\" },\r\n        { title: \"english\" },\r\n    ]);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        console.log(value);\r\n    }, [value]);\r\n\r\n    return (\r\n        <>\r\n            <ReactQuill\r\n                modules={{\r\n                    syntax: true,\r\n                    toolbar: [\r\n                        [\"bold\", \"italic\", \"underline\", \"strike\"], // toggled buttons\r\n                        [\"blockquote\"],\r\n                        [\"image\", \"code-block\"],\r\n\r\n                        [{ header: 1 }, { header: 2 }], // custom button values\r\n                        [{ list: \"ordered\" }, { list: \"bullet\" }],\r\n                        [{ script: \"sub\" }, { script: \"super\" }], // superscript/subscript\r\n                        [{ indent: \"-1\" }, { indent: \"+1\" }], // outdent/indent\r\n                        [{ direction: \"rtl\" }], // text direction\r\n\r\n                        [{ size: [\"small\", false, \"large\", \"huge\"] }], // custom dropdown\r\n                        [{ header: [1, 2, 3, 4, 5, 6, false] }],\r\n\r\n                        [{ color: [] }, { background: [] }], // dropdown with defaults from theme\r\n                        [{ font: [\"roboto\", \"Times New Roman\"] }],\r\n                        [{ align: [] }],\r\n\r\n                        [\"clean\"], // remove formatting button\r\n                    ],\r\n                }}\r\n                theme=\"snow\"\r\n                value={value}\r\n                onChange={setValue}\r\n            />\r\n            <Box my={2}>\r\n                <Autocomplete\r\n                    options={categories}\r\n                    getOptionLabel={(option: { title: string }) => option.title}\r\n                    style={{ width: 300 }}\r\n                    renderInput={(params: any) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label=\"Category\"\r\n                            variant=\"filled\"\r\n                        />\r\n                    )}\r\n                />\r\n            </Box>\r\n\r\n            <Box display=\"flex\" my={2}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    color=\"primary\"\r\n                >\r\n                    save\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\">\r\n                    cancel\r\n                </Button>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostView;\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postActions.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postTypes.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\store.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\rootReducer.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postReducer.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\Post.ts",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":22,"nodeType":"87","messageId":"88","endLine":1,"endColumn":32},{"ruleId":"85","severity":1,"message":"89","line":8,"column":5,"nodeType":"87","messageId":"88","endLine":8,"endColumn":14},{"ruleId":"85","severity":1,"message":"90","line":12,"column":5,"nodeType":"87","messageId":"88","endLine":12,"endColumn":14},{"ruleId":"85","severity":1,"message":"91","line":6,"column":8,"nodeType":"87","messageId":"88","endLine":6,"endColumn":12},{"ruleId":"92","severity":1,"message":"93","line":22,"column":8,"nodeType":"94","endLine":22,"endColumn":10,"suggestions":"95"},{"ruleId":"85","severity":1,"message":"96","line":1,"column":8,"nodeType":"87","messageId":"88","endLine":1,"endColumn":15},{"ruleId":"85","severity":1,"message":"97","line":3,"column":5,"nodeType":"87","messageId":"88","endLine":3,"endColumn":14},{"ruleId":"85","severity":1,"message":"98","line":4,"column":5,"nodeType":"87","messageId":"88","endLine":4,"endColumn":21},{"ruleId":"85","severity":1,"message":"99","line":5,"column":5,"nodeType":"87","messageId":"88","endLine":5,"endColumn":21},{"ruleId":"85","severity":1,"message":"100","line":6,"column":5,"nodeType":"87","messageId":"88","endLine":6,"endColumn":8},{"ruleId":"85","severity":1,"message":"86","line":12,"column":5,"nodeType":"87","messageId":"88","endLine":12,"endColumn":15},{"ruleId":"85","severity":1,"message":"86","line":1,"column":29,"nodeType":"87","messageId":"88","endLine":1,"endColumn":39},{"ruleId":"85","severity":1,"message":"101","line":1,"column":35,"nodeType":"87","messageId":"88","endLine":1,"endColumn":40},{"ruleId":"85","severity":1,"message":"102","line":4,"column":22,"nodeType":"87","messageId":"88","endLine":4,"endColumn":27},{"ruleId":"85","severity":1,"message":"103","line":18,"column":24,"nodeType":"87","messageId":"88","endLine":18,"endColumn":37},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'InputBase' is defined but never used.","'TextField' is defined but never used.","'Post' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["106"],"'classes' is defined but never used.","'Accordion' is defined but never used.","'AccordionDetails' is defined but never used.","'AccordionSummary' is defined but never used.","'Box' is defined but never used.","'Paper' is defined but never used.","'Quill' is defined but never used.","'setCategories' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},"Update the dependencies array to be: [dispatch]",{"range":"109","text":"110"},[834,836],"[dispatch]"]