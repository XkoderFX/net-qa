[{"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\index.tsx":"1","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\App.tsx":"3","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\store.ts":"4","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\Navbar.tsx":"5","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\layout\\Main.tsx":"6","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\rootReducer.ts":"7","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postActions.ts":"8","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostView.tsx":"9","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostList.tsx":"10","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postReducer.ts":"11","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postTypes.ts":"12","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\posts\\PostList.tsx":"13","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\ModalPop.tsx":"14","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\posts\\PostEdit.tsx":"15","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\posts\\PostView.tsx":"16"},{"size":504,"mtime":1610044490750,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":661,"mtime":1610044490741,"results":"20","hashOfConfig":"18"},{"size":368,"mtime":1610044490755,"results":"21","hashOfConfig":"18"},{"size":3883,"mtime":1610045605597,"results":"22","hashOfConfig":"18"},{"size":2578,"mtime":1610045605599,"results":"23","hashOfConfig":"18"},{"size":194,"mtime":1610044490754,"results":"24","hashOfConfig":"18"},{"size":2219,"mtime":1610044628685,"results":"25","hashOfConfig":"18"},{"size":656,"mtime":1610044628683,"results":"26","hashOfConfig":"18"},{"size":2776,"mtime":1610044628682,"results":"27","hashOfConfig":"18"},{"size":1530,"mtime":1610044628686,"results":"28","hashOfConfig":"18"},{"size":426,"mtime":1610044490753,"results":"29","hashOfConfig":"18"},{"size":2918,"mtime":1610045618452,"results":"30","hashOfConfig":"18"},{"size":9771,"mtime":1610045605595,"results":"31","hashOfConfig":"18"},{"size":3259,"mtime":1610045605597,"results":"32","hashOfConfig":"18"},{"size":618,"mtime":1610045605598,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"p5r2f3",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\index.tsx",[],["71","72"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\App.tsx",["73"],"import { makeStyles, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport Navbar from \"./components/Navbar\";\nimport Main from \"./layout/Main\";\nimport store from \"./redux/store\";\n\nconst useStyles = makeStyles({\n    app: {\n        fontFamily: \"Roboto\",\n    },\n});\n\nfunction App() {\n    const classes = useStyles();\n\n    return (\n        <Provider store={store}>\n            <div className={classes.app}>\n                <Navbar options={[\"my\", \"nodeJS\", \"geometry\"]}></Navbar>\n                <Main></Main>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\store.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\Navbar.tsx",["74","75"],"import {\r\n    AppBar,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    Grid,\r\n    Input,\r\n    InputBase,\r\n    ListItemText,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Toolbar,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { resetCurrentPost } from \"../redux/posts/postActions\";\r\n\r\nconst Navbar: React.FC<{ options: string[] }> = ({ options }) => {\r\n    const [categories, setCategories] = React.useState<string[]>([]);\r\n    const dispatch = useDispatch();\r\n    const handleSelect = (e: React.ChangeEvent<{ value: unknown }>) => {\r\n        setCategories(e.target.value as string[]);\r\n    };\r\n\r\n    const handleAdd = () => {\r\n        dispatch(resetCurrentPost());\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"xl\">\r\n            <AppBar color=\"inherit\" position=\"static\">\r\n                <Toolbar>\r\n                    <Grid spacing={3} container>\r\n                        <Grid item xs={1}>\r\n                            <Button\r\n                                onClick={handleAdd}\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"inherit\"\r\n                            >\r\n                                add\r\n                            </Button>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={7}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"categories\"\r\n                                multiple\r\n                                onChange={handleSelect}\r\n                                value={categories}\r\n                                input={<Input />}\r\n                                renderValue={(selected: unknown) =>\r\n                                    (selected as string[]).join(\", \")\r\n                                }\r\n                            >\r\n                                {options.map((value, index) => (\r\n                                    <MenuItem\r\n                                        key={Date.now() + index}\r\n                                        value={value}\r\n                                    >\r\n                                        <Checkbox\r\n                                            checked={categories.includes(value)}\r\n                                        />\r\n                                        <ListItemText primary={value} />\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={4}>\r\n                            <Input fullWidth placeholder=\"Searchâ€¦\"></Input>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\layout\\Main.tsx",["76","77"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\rootReducer.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postActions.ts",["78"],"import Post, { Article } from \"../Post\";\r\nimport { postTypes } from \"./postTypes\";\r\nimport { uuid } from \"uuidv4\";\r\nimport { PostState } from \"./postReducer\";\r\nimport { Dispatch } from \"redux\";\r\nimport axios from \"axios\";\r\n\r\nexport interface PostFetchAction {\r\n    type: postTypes;\r\n    payload?: Post[];\r\n}\r\n\r\nexport interface PostChangeAction {\r\n    type: postTypes;\r\n    payload?: Article;\r\n}\r\n\r\nexport interface PostCreateAction {\r\n    type: postTypes;\r\n    payload?: Post;\r\n}\r\n\r\nexport const fetchPosts = () => async (dispatch: Dispatch<PostFetchAction>) => {\r\n    dispatch(fetchPostsRequest());\r\n    const { data } = await axios.get(\"http://localhost:3000/api/categories\");\r\n    dispatch(fetchPostsSuccess(data));\r\n};\r\n\r\nexport const fetchPostsRequest = () => ({\r\n    type: postTypes.FETCH_POSTS_REQUEST,\r\n});\r\n\r\nexport const fetchPostsSuccess = (posts: Post[]) => ({\r\n    type: postTypes.FETCH_POSTS_SUCCESS,\r\n    payload: posts,\r\n});\r\n\r\nexport const fetchPostsFailure = (error: string) => ({\r\n    type: postTypes.FETCH_POSTS_FAILURE,\r\n    payload: error,\r\n});\r\n\r\nexport const changeCurrentPost = (categoryId: string, postId: string) => (\r\n    dispatch: Dispatch<PostChangeAction>,\r\n    getState: () => { postsReducer: PostState }\r\n) => {\r\n    const {\r\n        postsReducer: { posts },\r\n    } = getState();\r\n\r\n    const subject = posts.find((post) => post._id === categoryId);\r\n    const post = subject?.articles.find((articles) => articles._id === postId);\r\n    console.log(post);\r\n\r\n    dispatch({ type: postTypes.CHANGE_CURRENT_POST, payload: post });\r\n};\r\n\r\nexport const createArticle = ({\r\n    name,\r\n    body,\r\n    category,\r\n}: Omit<Article, \"_id\">) => async (dispatch: Dispatch<PostCreateAction>) => {\r\n\r\n    const article: Omit<Article, \"_id\"> = { name, body, category };\r\n\r\n    try {\r\n        const { data } = await axios.post(\r\n            `http://localhost:3000/api/categories/${category}`,\r\n            article\r\n        );\r\n        dispatch({ type: postTypes.CREATE_POST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        dispatch({ type: postTypes.CREATE_POST_FAILURE, payload: error });\r\n    }\r\n};\r\n\r\nexport const resetCurrentPost = () => ({\r\n    type: postTypes.RESET_CURRENT_POST,\r\n});\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostView.tsx",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostList.tsx",["79","80","81","82","83","84"],"import classes from \"*.module.css\";\r\nimport {\r\n    Accordion,\r\n    AccordionDetails,\r\n    AccordionSummary,\r\n    Box,\r\n    Collapse,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Paper,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { ExpandLess } from \"@material-ui/icons\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Post from \"../redux/Post\";\r\nimport { changeCurrentPost } from \"../redux/posts/postActions\";\r\n\r\ninterface PostListProps {\r\n    items: Post[];\r\n}\r\n\r\nconst PostList: React.FC<PostListProps> = ({ items = [] }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [collapsed, setCollapsed] = React.useState<{\r\n        [index: string]: boolean;\r\n    }>({});\r\n    const handleCollapse = (index: string) => {\r\n        setCollapsed((collapsed) => ({\r\n            ...collapsed,\r\n            [index]: !collapsed[index],\r\n        }));\r\n    };\r\n\r\n    const handleListClick = (categoryId: string, postId: string) => {\r\n        dispatch(changeCurrentPost(categoryId, postId));\r\n    };\r\n\r\n    return (\r\n        <Paper>\r\n            <List component=\"nav\">\r\n                {items.map((item) => (\r\n                    <>\r\n                        <ListItem\r\n                            button\r\n                            onClick={() => handleCollapse(item._id)}\r\n                        >\r\n                            <ListItemText primary={item.category} />\r\n                            {collapsed[item._id] ? (\r\n                                <ExpandLess />\r\n                            ) : (\r\n                                <ExpandMore />\r\n                            )}\r\n                        </ListItem>\r\n\r\n                        <Collapse\r\n                            in={collapsed[item._id]}\r\n                            timeout=\"auto\"\r\n                            unmountOnExit\r\n                        >\r\n                            <List disablePadding>\r\n                                {item.articles.map((post) => (\r\n                                    <ListItem\r\n                                        onClick={() =>\r\n                                            handleListClick(item._id, post._id)\r\n                                        }\r\n                                        key={post._id}\r\n                                        button\r\n                                    >\r\n                                        <ListItemText primary={post.name} />\r\n                                    </ListItem>\r\n                                ))}\r\n                            </List>\r\n                        </Collapse>\r\n                    </>\r\n                ))}\r\n            </List>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default PostList;\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postReducer.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postTypes.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\posts\\PostList.tsx",["85","86","87","88"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\ModalPop.tsx",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\posts\\PostEdit.tsx",["89"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\posts\\PostView.tsx",["90"],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":1,"column":22,"nodeType":"97","messageId":"98","endLine":1,"endColumn":32},{"ruleId":"95","severity":1,"message":"99","line":8,"column":5,"nodeType":"97","messageId":"98","endLine":8,"endColumn":14},{"ruleId":"95","severity":1,"message":"100","line":12,"column":5,"nodeType":"97","messageId":"98","endLine":12,"endColumn":14},{"ruleId":"95","severity":1,"message":"101","line":6,"column":8,"nodeType":"97","messageId":"98","endLine":6,"endColumn":12},{"ruleId":"102","severity":1,"message":"103","line":30,"column":8,"nodeType":"104","endLine":30,"endColumn":10,"suggestions":"105"},{"ruleId":"95","severity":1,"message":"106","line":3,"column":10,"nodeType":"97","messageId":"98","endLine":3,"endColumn":14},{"ruleId":"95","severity":1,"message":"107","line":1,"column":8,"nodeType":"97","messageId":"98","endLine":1,"endColumn":15},{"ruleId":"95","severity":1,"message":"108","line":3,"column":5,"nodeType":"97","messageId":"98","endLine":3,"endColumn":14},{"ruleId":"95","severity":1,"message":"109","line":4,"column":5,"nodeType":"97","messageId":"98","endLine":4,"endColumn":21},{"ruleId":"95","severity":1,"message":"110","line":5,"column":5,"nodeType":"97","messageId":"98","endLine":5,"endColumn":21},{"ruleId":"95","severity":1,"message":"111","line":6,"column":5,"nodeType":"97","messageId":"98","endLine":6,"endColumn":8},{"ruleId":"95","severity":1,"message":"96","line":12,"column":5,"nodeType":"97","messageId":"98","endLine":12,"endColumn":15},{"ruleId":"95","severity":1,"message":"108","line":3,"column":5,"nodeType":"97","messageId":"98","endLine":3,"endColumn":14},{"ruleId":"95","severity":1,"message":"109","line":4,"column":5,"nodeType":"97","messageId":"98","endLine":4,"endColumn":21},{"ruleId":"95","severity":1,"message":"110","line":5,"column":5,"nodeType":"97","messageId":"98","endLine":5,"endColumn":21},{"ruleId":"95","severity":1,"message":"96","line":12,"column":5,"nodeType":"97","messageId":"98","endLine":12,"endColumn":15},{"ruleId":"95","severity":1,"message":"112","line":24,"column":22,"nodeType":"97","messageId":"98","endLine":24,"endColumn":35},{"ruleId":"95","severity":1,"message":"96","line":1,"column":29,"nodeType":"97","messageId":"98","endLine":1,"endColumn":39},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'InputBase' is defined but never used.","'TextField' is defined but never used.","'Post' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["115"],"'uuid' is defined but never used.","'classes' is defined but never used.","'Accordion' is defined but never used.","'AccordionDetails' is defined but never used.","'AccordionSummary' is defined but never used.","'Box' is defined but never used.","'setCategories' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},"Update the dependencies array to be: [dispatch]",{"range":"118","text":"119"},[1063,1065],"[dispatch]"]