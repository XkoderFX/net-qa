[{"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\index.tsx":"1","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\App.tsx":"3","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\store.ts":"4","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\Navbar.tsx":"5","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\layout\\Main.tsx":"6","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\rootReducer.ts":"7","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postActions.ts":"8","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostView.tsx":"9","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostList.tsx":"10","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postReducer.ts":"11","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postTypes.ts":"12","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\posts\\PostList.tsx":"13","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostEdit.tsx":"14"},{"size":504,"mtime":1610044490750,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":661,"mtime":1610044490741,"results":"18","hashOfConfig":"16"},{"size":368,"mtime":1610044490755,"results":"19","hashOfConfig":"16"},{"size":2909,"mtime":1610045305234,"results":"20","hashOfConfig":"16"},{"size":2560,"mtime":1610045305241,"results":"21","hashOfConfig":"16"},{"size":194,"mtime":1610044490754,"results":"22","hashOfConfig":"16"},{"size":2219,"mtime":1610044628685,"results":"23","hashOfConfig":"16"},{"size":656,"mtime":1610044628683,"results":"24","hashOfConfig":"16"},{"size":2776,"mtime":1610044628682,"results":"25","hashOfConfig":"16"},{"size":1530,"mtime":1610044628686,"results":"26","hashOfConfig":"16"},{"size":426,"mtime":1610044490753,"results":"27","hashOfConfig":"16"},{"size":2917,"mtime":1610045305239,"results":"28","hashOfConfig":"16"},{"size":4054,"mtime":1610045305237,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"p5r2f3",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\index.tsx",[],["64","65"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\App.tsx",["66"],"import { makeStyles, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport Navbar from \"./components/Navbar\";\nimport Main from \"./layout/Main\";\nimport store from \"./redux/store\";\n\nconst useStyles = makeStyles({\n    app: {\n        fontFamily: \"Roboto\",\n    },\n});\n\nfunction App() {\n    const classes = useStyles();\n\n    return (\n        <Provider store={store}>\n            <div className={classes.app}>\n                <Navbar options={[\"my\", \"nodeJS\", \"geometry\"]}></Navbar>\n                <Main></Main>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\store.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\Navbar.tsx",["67","68"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\layout\\Main.tsx",["69","70"],"import { Box, Container, Grid, Typography } from \"@material-ui/core\";\r\nimport React, { useEffect } from \"react\";\r\nimport PostEdit from \"../components/PostEdit\";\r\nimport PostList from \"../components/PostList\";\r\nimport PostView from \"../components/PostView\";\r\nimport Post from \"../redux/Post\";\r\nimport { createArticle, fetchPosts } from \"../redux/posts/postActions\";\r\nimport { PostState } from \"../redux/posts/postReducer\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst Main = () => {\r\n    const dispatch = useDispatch();\r\n    const postData = useSelector(\r\n        (state: { postsReducer: PostState }) => state.postsReducer.posts\r\n    );\r\n    const currentPost = useSelector(\r\n        (state: { postsReducer: PostState }) => state.postsReducer.currentPost\r\n    );\r\n\r\n    const handlePostSave = (\r\n        category: string,\r\n        name: string,\r\n        content: string\r\n    ) => {\r\n        dispatch(createArticle({ name, body: content, category }));\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchPosts());\r\n    }, []);\r\n\r\n    console.log(postData);\r\n\r\n    return (\r\n        <Container maxWidth=\"xl\">\r\n            <Grid spacing={2} container>\r\n                <Grid item xs={4}>\r\n                    <Box my={3}>\r\n                        <PostList items={postData}></PostList>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                    <Box my={3}>\r\n                        {currentPost ? (\r\n                            <PostView\r\n                                category={currentPost.category}\r\n                                article={currentPost}\r\n                            ></PostView>\r\n                        ) : (\r\n                            <>\r\n                                <Typography paragraph variant=\"h4\">\r\n                                    Create a post\r\n                                </Typography>\r\n                                <PostEdit\r\n                                    onSave={(category, name, content) => {\r\n                                        console.log(\r\n                                            `${category} ${name} ${content}`\r\n                                        );\r\n                                        handlePostSave(category, name, content);\r\n                                    }}\r\n                                ></PostEdit>\r\n                            </>\r\n                        )}\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\rootReducer.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postActions.ts",["71"],"import Post, { Article } from \"../Post\";\r\nimport { postTypes } from \"./postTypes\";\r\nimport { uuid } from \"uuidv4\";\r\nimport { PostState } from \"./postReducer\";\r\nimport { Dispatch } from \"redux\";\r\nimport axios from \"axios\";\r\n\r\nexport interface PostFetchAction {\r\n    type: postTypes;\r\n    payload?: Post[];\r\n}\r\n\r\nexport interface PostChangeAction {\r\n    type: postTypes;\r\n    payload?: Article;\r\n}\r\n\r\nexport interface PostCreateAction {\r\n    type: postTypes;\r\n    payload?: Post;\r\n}\r\n\r\nexport const fetchPosts = () => async (dispatch: Dispatch<PostFetchAction>) => {\r\n    dispatch(fetchPostsRequest());\r\n    const { data } = await axios.get(\"http://localhost:3000/api/categories\");\r\n    dispatch(fetchPostsSuccess(data));\r\n};\r\n\r\nexport const fetchPostsRequest = () => ({\r\n    type: postTypes.FETCH_POSTS_REQUEST,\r\n});\r\n\r\nexport const fetchPostsSuccess = (posts: Post[]) => ({\r\n    type: postTypes.FETCH_POSTS_SUCCESS,\r\n    payload: posts,\r\n});\r\n\r\nexport const fetchPostsFailure = (error: string) => ({\r\n    type: postTypes.FETCH_POSTS_FAILURE,\r\n    payload: error,\r\n});\r\n\r\nexport const changeCurrentPost = (categoryId: string, postId: string) => (\r\n    dispatch: Dispatch<PostChangeAction>,\r\n    getState: () => { postsReducer: PostState }\r\n) => {\r\n    const {\r\n        postsReducer: { posts },\r\n    } = getState();\r\n\r\n    const subject = posts.find((post) => post._id === categoryId);\r\n    const post = subject?.articles.find((articles) => articles._id === postId);\r\n    console.log(post);\r\n\r\n    dispatch({ type: postTypes.CHANGE_CURRENT_POST, payload: post });\r\n};\r\n\r\nexport const createArticle = ({\r\n    name,\r\n    body,\r\n    category,\r\n}: Omit<Article, \"_id\">) => async (dispatch: Dispatch<PostCreateAction>) => {\r\n\r\n    const article: Omit<Article, \"_id\"> = { name, body, category };\r\n\r\n    try {\r\n        const { data } = await axios.post(\r\n            `http://localhost:3000/api/categories/${category}`,\r\n            article\r\n        );\r\n        dispatch({ type: postTypes.CREATE_POST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        dispatch({ type: postTypes.CREATE_POST_FAILURE, payload: error });\r\n    }\r\n};\r\n\r\nexport const resetCurrentPost = () => ({\r\n    type: postTypes.RESET_CURRENT_POST,\r\n});\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostView.tsx",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostList.tsx",["72","73","74","75","76","77"],"import classes from \"*.module.css\";\r\nimport {\r\n    Accordion,\r\n    AccordionDetails,\r\n    AccordionSummary,\r\n    Box,\r\n    Collapse,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Paper,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { ExpandLess } from \"@material-ui/icons\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Post from \"../redux/Post\";\r\nimport { changeCurrentPost } from \"../redux/posts/postActions\";\r\n\r\ninterface PostListProps {\r\n    items: Post[];\r\n}\r\n\r\nconst PostList: React.FC<PostListProps> = ({ items = [] }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [collapsed, setCollapsed] = React.useState<{\r\n        [index: string]: boolean;\r\n    }>({});\r\n    const handleCollapse = (index: string) => {\r\n        setCollapsed((collapsed) => ({\r\n            ...collapsed,\r\n            [index]: !collapsed[index],\r\n        }));\r\n    };\r\n\r\n    const handleListClick = (categoryId: string, postId: string) => {\r\n        dispatch(changeCurrentPost(categoryId, postId));\r\n    };\r\n\r\n    return (\r\n        <Paper>\r\n            <List component=\"nav\">\r\n                {items.map((item) => (\r\n                    <>\r\n                        <ListItem\r\n                            button\r\n                            onClick={() => handleCollapse(item._id)}\r\n                        >\r\n                            <ListItemText primary={item.category} />\r\n                            {collapsed[item._id] ? (\r\n                                <ExpandLess />\r\n                            ) : (\r\n                                <ExpandMore />\r\n                            )}\r\n                        </ListItem>\r\n\r\n                        <Collapse\r\n                            in={collapsed[item._id]}\r\n                            timeout=\"auto\"\r\n                            unmountOnExit\r\n                        >\r\n                            <List disablePadding>\r\n                                {item.articles.map((post) => (\r\n                                    <ListItem\r\n                                        onClick={() =>\r\n                                            handleListClick(item._id, post._id)\r\n                                        }\r\n                                        key={post._id}\r\n                                        button\r\n                                    >\r\n                                        <ListItemText primary={post.name} />\r\n                                    </ListItem>\r\n                                ))}\r\n                            </List>\r\n                        </Collapse>\r\n                    </>\r\n                ))}\r\n            </List>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default PostList;\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postReducer.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\redux\\posts\\postTypes.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\posts\\PostList.tsx",["78","79","80","81"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostEdit.tsx",["82","83","84"],"import { Box, Button, makeStyles, Paper, TextField } from \"@material-ui/core\";\r\nimport React, { ChangeEvent, useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport ReactQuill, { Quill } from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport \"highlight.js/styles/darcula.css\";\r\nimport \"./styles/editor.css\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n}));\r\n\r\ninterface PostViewProps {\r\n    onSave: (category: string, name: string, content: string) => void;\r\n}\r\n\r\nconst PostView: React.FC<PostViewProps> = ({ onSave }) => {\r\n    const [value, setValue] = useState(\"\"); // quill text body\r\n    const [name, setName] = useState(\"\");\r\n    const [category, setCategory] = useState({ title: \"\" });\r\n    const [categories, setCategories] = useState([\r\n        { title: \"web\" },\r\n        { title: \"math\" },\r\n        { title: \"english\" },\r\n    ]);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        console.log(value);\r\n    }, [value]);\r\n\r\n    return (\r\n        <>\r\n            <ReactQuill\r\n                modules={{\r\n                    syntax: true,\r\n                    toolbar: [\r\n                        [\"bold\", \"italic\", \"underline\", \"strike\"], // toggled buttons\r\n                        [\"blockquote\"],\r\n                        [\"image\", \"code-block\"],\r\n\r\n                        [{ header: 1 }, { header: 2 }], // custom button values\r\n                        [{ list: \"ordered\" }, { list: \"bullet\" }],\r\n                        [{ script: \"sub\" }, { script: \"super\" }], // superscript/subscript\r\n                        [{ indent: \"-1\" }, { indent: \"+1\" }], // outdent/indent\r\n                        [{ direction: \"rtl\" }], // text direction\r\n\r\n                        [{ size: [\"small\", false, \"large\", \"huge\"] }], // custom dropdown\r\n                        [{ header: [1, 2, 3, 4, 5, 6, false] }],\r\n\r\n                        [{ color: [] }, { background: [] }], // dropdown with defaults from theme\r\n                        [{ font: [\"roboto\", \"Times New Roman\"] }],\r\n                        [{ align: [] }],\r\n\r\n                        [\"clean\"], // remove formatting button\r\n                    ],\r\n                }}\r\n                theme=\"snow\"\r\n                value={value}\r\n                onChange={setValue}\r\n            />\r\n            <Box my={2}>\r\n                <TextField\r\n                    style={{ width: 300 }}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    label=\"name\"\r\n                    variant=\"filled\"\r\n                />\r\n            </Box>\r\n            <Box my={2}>\r\n                <Autocomplete\r\n                    onChange={(\r\n                        event: ChangeEvent<{}>,\r\n                        categorySelected: { title: string } | null\r\n                    ) => {\r\n                        setCategory(categorySelected!);\r\n                    }}\r\n                    options={categories}\r\n                    getOptionLabel={(option: { title: string }) => option.title}\r\n                    style={{ width: 300 }}\r\n                    renderInput={(params: any) => (\r\n                        <TextField\r\n                            {...params}\r\n                            label=\"Category\"\r\n                            variant=\"filled\"\r\n                        />\r\n                    )}\r\n                />\r\n            </Box>\r\n\r\n            <Box display=\"flex\" my={2}>\r\n                <Button\r\n                    onClick={() => {\r\n                        onSave(category.title, name, value);\r\n                    }}\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    color=\"primary\"\r\n                >\r\n                    save\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\">\r\n                    cancel\r\n                </Button>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostView;\r\n",{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":22,"nodeType":"91","messageId":"92","endLine":1,"endColumn":32},{"ruleId":"89","severity":1,"message":"93","line":8,"column":5,"nodeType":"91","messageId":"92","endLine":8,"endColumn":14},{"ruleId":"89","severity":1,"message":"94","line":12,"column":5,"nodeType":"91","messageId":"92","endLine":12,"endColumn":14},{"ruleId":"89","severity":1,"message":"95","line":6,"column":8,"nodeType":"91","messageId":"92","endLine":6,"endColumn":12},{"ruleId":"96","severity":1,"message":"97","line":30,"column":8,"nodeType":"98","endLine":30,"endColumn":10,"suggestions":"99"},{"ruleId":"89","severity":1,"message":"100","line":3,"column":10,"nodeType":"91","messageId":"92","endLine":3,"endColumn":14},{"ruleId":"89","severity":1,"message":"101","line":1,"column":8,"nodeType":"91","messageId":"92","endLine":1,"endColumn":15},{"ruleId":"89","severity":1,"message":"102","line":3,"column":5,"nodeType":"91","messageId":"92","endLine":3,"endColumn":14},{"ruleId":"89","severity":1,"message":"103","line":4,"column":5,"nodeType":"91","messageId":"92","endLine":4,"endColumn":21},{"ruleId":"89","severity":1,"message":"104","line":5,"column":5,"nodeType":"91","messageId":"92","endLine":5,"endColumn":21},{"ruleId":"89","severity":1,"message":"105","line":6,"column":5,"nodeType":"91","messageId":"92","endLine":6,"endColumn":8},{"ruleId":"89","severity":1,"message":"90","line":12,"column":5,"nodeType":"91","messageId":"92","endLine":12,"endColumn":15},{"ruleId":"89","severity":1,"message":"102","line":3,"column":5,"nodeType":"91","messageId":"92","endLine":3,"endColumn":14},{"ruleId":"89","severity":1,"message":"103","line":4,"column":5,"nodeType":"91","messageId":"92","endLine":4,"endColumn":21},{"ruleId":"89","severity":1,"message":"104","line":5,"column":5,"nodeType":"91","messageId":"92","endLine":5,"endColumn":21},{"ruleId":"89","severity":1,"message":"90","line":12,"column":5,"nodeType":"91","messageId":"92","endLine":12,"endColumn":15},{"ruleId":"89","severity":1,"message":"106","line":1,"column":35,"nodeType":"91","messageId":"92","endLine":1,"endColumn":40},{"ruleId":"89","severity":1,"message":"107","line":4,"column":22,"nodeType":"91","messageId":"92","endLine":4,"endColumn":27},{"ruleId":"89","severity":1,"message":"108","line":24,"column":24,"nodeType":"91","messageId":"92","endLine":24,"endColumn":37},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'InputBase' is defined but never used.","'TextField' is defined but never used.","'Post' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["111"],"'uuid' is defined but never used.","'classes' is defined but never used.","'Accordion' is defined but never used.","'AccordionDetails' is defined but never used.","'AccordionSummary' is defined but never used.","'Box' is defined but never used.","'Paper' is defined but never used.","'Quill' is defined but never used.","'setCategories' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},"Update the dependencies array to be: [dispatch]",{"range":"114","text":"115"},[1045,1047],"[dispatch]"]