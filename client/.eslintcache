[{"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\index.tsx":"1","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\App.tsx":"3","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\Navbar.tsx":"4","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\layout\\Main.tsx":"5","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostList.tsx":"6","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostView.tsx":"7","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostEdit.tsx":"8"},{"size":488,"mtime":1608818239876,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":490,"mtime":1608818341293,"results":"12","hashOfConfig":"10"},{"size":2633,"mtime":1608582638049,"results":"13","hashOfConfig":"10"},{"size":1477,"mtime":1608895752673,"results":"14","hashOfConfig":"10"},{"size":2435,"mtime":1608755011999,"results":"15","hashOfConfig":"10"},{"size":151,"mtime":1608895728821,"results":"16","hashOfConfig":"10"},{"size":1689,"mtime":1608898488620,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"p5r2f3",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\index.tsx",[],["38","39"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\App.tsx",["40"],"import { makeStyles, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Main from \"./layout/Main\";\n\nconst useStyles = makeStyles({\n    app: {\n        fontFamily: \"Roboto\",\n    },\n});\n\nfunction App() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.app}>\n            <Navbar options={[\"my\", \"nodeJS\", \"geometry\"]}></Navbar>\n            <Main></Main>\n        </div>\n    );\n}\n\nexport default App;\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\Navbar.tsx",["41","42"],"import {\r\n    AppBar,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    Grid,\r\n    Input,\r\n    InputBase,\r\n    ListItemText,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Toolbar,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst Navbar: React.FC<{ options: string[] }> = ({ options }) => {\r\n    const [categories, setCategories] = React.useState<string[]>([]);\r\n\r\n    const handleSelect = (e: React.ChangeEvent<{ value: unknown }>) => {\r\n        setCategories(e.target.value as string[]);\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"xl\">\r\n            <AppBar color=\"inherit\" position=\"static\">\r\n                <Toolbar>\r\n                    <Grid spacing={3} container>\r\n                        <Grid item xs={1}>\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"inherit\"\r\n                            >\r\n                                add\r\n                            </Button>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={7}>\r\n                            <Select\r\n                                fullWidth\r\n                                label=\"categories\"\r\n                                multiple\r\n                                onChange={handleSelect}\r\n                                value={categories}\r\n                                input={<Input />}\r\n                                renderValue={(selected: unknown) =>\r\n                                    (selected as string[]).join(\", \")\r\n                                }\r\n                            >\r\n                                {options.map((value, index) => (\r\n                                    <MenuItem\r\n                                        key={Date.now() + index}\r\n                                        value={value}\r\n                                    >\r\n                                        <Checkbox\r\n                                            checked={categories.includes(value)}\r\n                                        />\r\n                                        <ListItemText primary={value} />\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={4}>\r\n                            <Input fullWidth placeholder=\"Searchâ€¦\"></Input>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\layout\\Main.tsx",["43","44","45","46"],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostList.tsx",["47","48","49","50","51","52"],"import classes from \"*.module.css\";\r\nimport {\r\n    Accordion,\r\n    AccordionDetails,\r\n    AccordionSummary,\r\n    Box,\r\n    Collapse,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Paper,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { ExpandLess } from \"@material-ui/icons\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport React from \"react\";\r\n\r\ninterface PostListProps {\r\n    items: TreeItem[];\r\n}\r\n\r\ninterface TreeItem {\r\n    category: string;\r\n    posts: { name: string }[];\r\n}\r\n\r\nconst PostList: React.FC<PostListProps> = ({ items }) => {\r\n    const [collapsed, setCollapsed] = React.useState<{\r\n        [index: number]: boolean;\r\n    }>({});\r\n    const handleCollapse = (index: number) => {\r\n        setCollapsed((collapsed) => ({\r\n            ...collapsed,\r\n            [index]: !collapsed[index],\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <Paper>\r\n                <List component=\"nav\">\r\n                    {items.map((item, index) => (\r\n                        <>\r\n                            <ListItem\r\n                                button\r\n                                onClick={() => handleCollapse(index)}\r\n                            >\r\n                                <ListItemText primary={item.category} />\r\n                                {collapsed[index] ? (\r\n                                    <ExpandLess />\r\n                                ) : (\r\n                                    <ExpandMore />\r\n                                )}\r\n                            </ListItem>\r\n\r\n                            <Collapse\r\n                                in={collapsed[index]}\r\n                                timeout=\"auto\"\r\n                                unmountOnExit\r\n                            >\r\n                                <List disablePadding>\r\n                                    {item.posts.map((subject) => (\r\n                                        <ListItem button>\r\n                                            <ListItemText\r\n                                                primary={subject.name}\r\n                                            />\r\n                                        </ListItem>\r\n                                    ))}\r\n                                </List>\r\n                            </Collapse>\r\n                        </>\r\n                    ))}\r\n                </List>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default PostList;\r\n","C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostView.tsx",[],"C:\\Users\\Koder\\Desktop\\programingLS\\projects\\porfolio\\net-qa\\client\\src\\components\\PostEdit.tsx",["53","54","55"],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":22,"nodeType":"62","messageId":"63","endLine":1,"endColumn":32},{"ruleId":"60","severity":1,"message":"64","line":8,"column":5,"nodeType":"62","messageId":"63","endLine":8,"endColumn":14},{"ruleId":"60","severity":1,"message":"65","line":12,"column":5,"nodeType":"62","messageId":"63","endLine":12,"endColumn":14},{"ruleId":"60","severity":1,"message":"66","line":5,"column":8,"nodeType":"62","messageId":"63","endLine":5,"endColumn":16},{"ruleId":"60","severity":1,"message":"67","line":8,"column":12,"nodeType":"62","messageId":"63","endLine":8,"endColumn":16},{"ruleId":"60","severity":1,"message":"68","line":8,"column":18,"nodeType":"62","messageId":"63","endLine":8,"endColumn":25},{"ruleId":"60","severity":1,"message":"69","line":9,"column":22,"nodeType":"62","messageId":"63","endLine":9,"endColumn":33},{"ruleId":"60","severity":1,"message":"70","line":1,"column":8,"nodeType":"62","messageId":"63","endLine":1,"endColumn":15},{"ruleId":"60","severity":1,"message":"71","line":3,"column":5,"nodeType":"62","messageId":"63","endLine":3,"endColumn":14},{"ruleId":"60","severity":1,"message":"72","line":4,"column":5,"nodeType":"62","messageId":"63","endLine":4,"endColumn":21},{"ruleId":"60","severity":1,"message":"73","line":5,"column":5,"nodeType":"62","messageId":"63","endLine":5,"endColumn":21},{"ruleId":"60","severity":1,"message":"74","line":6,"column":5,"nodeType":"62","messageId":"63","endLine":6,"endColumn":8},{"ruleId":"60","severity":1,"message":"61","line":12,"column":5,"nodeType":"62","messageId":"63","endLine":12,"endColumn":15},{"ruleId":"60","severity":1,"message":"75","line":1,"column":10,"nodeType":"62","messageId":"63","endLine":1,"endColumn":20},{"ruleId":"60","severity":1,"message":"76","line":1,"column":22,"nodeType":"62","messageId":"63","endLine":1,"endColumn":27},{"ruleId":"60","severity":1,"message":"77","line":4,"column":22,"nodeType":"62","messageId":"63","endLine":4,"endColumn":27},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'InputBase' is defined but never used.","'TextField' is defined but never used.","'PostView' is defined but never used.","'mode' is assigned a value but never used.","'setMode' is assigned a value but never used.","'setPostData' is assigned a value but never used.","'classes' is defined but never used.","'Accordion' is defined but never used.","'AccordionDetails' is defined but never used.","'AccordionSummary' is defined but never used.","'Box' is defined but never used.","'makeStyles' is defined but never used.","'Paper' is defined but never used.","'Quill' is defined but never used.","no-global-assign","no-unsafe-negation"]